<?xml version="1.0"?>

<!--
    This is the configuration file of the Lightstreamer Kafka Connector pluggable into Lightstreamer Server.


    A very simple variable-expansion feature is available; see
    <enable_expansion_for_adapters_config> in the Server's main configuration file.
-->

<!-- Mandatory. Define the Kafka Connector Adapter Set and its unique ID. -->
<adapters_conf id="KAFKA">
    <metadata_provider>
        <!-- Java class name of the Kafka Connector Metadata Adapter. DO NOT EDIT IT. -->
        <adapter_class>com.lightstreamer.kafka_connector.adapters.ConnectorMetadataAdapter</adapter_class>
    </metadata_provider>

    <!-- The Lightstreamer Kafka Connector allows to configure indipendent connections to different Kakfa clusters.
         Every single connection is configured via the definition of a specific Lightstreamer Data Adapter.
         Since the Connector manages the physical connection to Kafka by wrapping an internal Kafka Consumer, many 
         configuration settings in the Data Adapter are identical to those required by the usual Kafka Consumer
         configuration.
         
         At least one connection configuration must be provided.
         Every configuration is distinguished throug the "name" attribute, which is "DFAULT" if not provided,
         but only one "DEFAULT" configuration is allowed. -->
    <data_provider name="CONNECTION">

        <!-- Java class name of the Kafka Connector Data Adapter. DO NOT EDIT IT. -->
        <adapter_class>com.lightstreamer.kafka_connector.adapters.ConnectorDataAdapter</adapter_class>
        
        <!-- Mandatory. Path of the configuration file for the log4j-based logging system. 
             The file path is relative to the Kafka Connector deployment directory. 
        -->
        <param name="logging.configuration.file">log4j.properties</param>

        <!-- Mandatory. The list of host/port pairs used to establish the initial connection to the Kafka cluster.
             The parameter sets the value of the "bootstrap.servers" key to configure the internal Kafka Consumer.
             See https://kafka.apache.org/documentation/#consumerconfigs_bootstrap.servers for more details.
         -->
        <param name="bootstrap.servers">broker:29092,broker:29003</param>

        <!-- Optional. The name of the consumer group this connection belongs to.
             The parameter sets the value for the "group.id" key used to configure the internal 
             Kafka Consumer. See https://kafka.apache.org/documentation/#consumerconfigs_group.id for more details. 
             If not specified, the Lightstreamer Kafka Connector automatically set the consumer group name by
             combining the adapter set, the connector name, and a randomly generated suffix. -->
        <!--
        param name="group.id">kafka-adapter-user-NEW</param>
        -->
        
        <!-- Lightstreamer Clients can subscribe to a special "service" item through which the Kafka Connector can
             send update about any issue while processing the records received fron the Kafka cluster.
             The following parameters configure such a service item. -->
        <!-- Optional. The name of the service item.
             Default: "info". -->
        <!-- 
        <param name="info.item">connection_info</param> 
        -->
        <!-- Optional. The field name of service item.
             Default: "message". -->
        <!--
        <param name="info.field">connection_message</param>
        -->

        <param name="record.extraction.error.strategy">IGNORE_AND_CONTINUE</param>
        <!-- <param name="record.extraction.error.strategy">FORCE_UNSUBSCRIPTION</param> -->

        <!-- Map one topic to one item -->
        <param name="item-template.user">user</param>
        <param name="map.topic-avro-one-to-one.to">item-template.user</param>
        <param name="value.evaluator.type">AVRO</param>
        <!-- <param name="value.evaluator.schema.file">user-value.avsc</param> -->
        <param name="key.evaluator.type">AVRO</param>
        <!-- <param name="key.evaluator.schema.file">user-key.avsc</param> -->
        <param name="key.evaluator.schema.registry.url">http://schema-registry:8081</param>
        <param name="value.evaluator.schema.registry.url">http://schema-registry:8081</param>        

        <param name="field.key-name">#{KEY.name}</param>
        <param name="field.age">#{VALUE.info.age}</param>
        <param name="field.height">#{VALUE.info.height}</param>
        <param name="field.zipcode1">#{VALUE.addresses[0].zipcode}</param>
        <param name="field.zipcode2">#{VALUE.addresses[1].zipcode}</param>
        <param name="field.docid">#{VALUE.documents['doc_id']['doc_id']}</param>
        <param name="field.doc_type">#{VALUE.documents['doc_id'].doc_type}</param>
        <param name="field.pref1">#{VALUE.preferences['pref1']}</param>
        <param name="field.type">#{VALUE.type}</param>
        <param name="field.signature">#{VALUE.signature}</param>
        <param name="field.union">#{VALUE.union}</param>
        <param name="field.partition">#{PARTITION}</param>

        <param name="field.key">#{KEY}</param>
        <param name="field.value">#{VALUE}</param>
        <param name="field.partition">#{PARTITION}</param>
        <param name="field.timestamp">#{TIMESTAMP}</param>



        <!-- Map one topic to multimple items -->
        <!--<param name="map.topic-avro-one-to-many.to">kafka-avro-#{name=User.name,friend=User.friends}</param>-->
        <!--<param name="map.topic-avro-one-to-many.to">kafka-avro-item2</param> -->

        <!-- Map many topics to one item -->
        <!-- <param name="map.topic-avro-many-to-one-2.to">kafka-avro-many-topics</param> -->

        <!-- Map one topic to one item template -->
        <!-- <param name="map.topic-avro.to">kafka-user-#{name=User.name,age=User.info.age}</param> -->
        
        <!-- Map one topic to many item templates -->
        <!--<param name="map.topic-avro.to">kafka-user-#{name=User.name},kafka-user-#{age=User.info.age}</param>-->
        
        <!--<param name="map.topic-avro-3.to">kafka-topic</param> -->

        <!--<param name="field.name">User.name</param> -->
        <!-- <param name="field.favorite_number">VALUE.User.favorite_number</param>
        <param name="field.age">VALUE.User.info.age</param>
        <param name="field.height">VALUE.User.info.height</param>
        <param name="field.zipcode1">VALUE.User.addresses[0].zipcode</param>
        <param name="field.zipcode2">VALUE.User.addresses[1].zipcode</param> -->
    </data_provider>

    <!-- <data_provider name="Suit">
        <adapter_class>com.lightstreamer.kafka_connector.adapter.KafkaConnectorAdapter</adapter_class>
        <param name="bootstrap-servers">broker:29092</param>
        <param name="group-id">kafka-adapter-suit</param>

        <param name="mapping_for_topic.topic-suit">suits</param>

        <param name="consumer">SymbolConsumer</param>
        <param name="item_suit">Suit</param>
    </data_provider> -->

    <!-- <data_provider name="Json">
        <adapter_class>com.lightstreamer.kafka_connector.adapter.KafkaConnectorAdapter</adapter_class>
        <param name="bootstrap-servers">broker:29092</param>
        <param name="group-id">kafka-adapter-json</param>

        <param name="topics">topic-json</param>
        <param name="mapped_item">kafka-user-#{name=firtName}</param>

        <param name="consumer">JsonConsumer</param>
        <param name="field.firstname">#{VALUE.firstName}</param>
        <param name="field.lastname">#{VALUE.lastName}</param>
    </data_provider> -->

    <!-- <data_provider name="Raw">
        <adapter_class>com.lightstreamer.kafka_connector.adapter.KafkaConnectorAdapter</adapter_class>
        <param name="bootstrap-servers">broker:29092</param>
        <param name="group-id">kafka-adapter-json</param>

        <param name="map.topic-raw.to">topic-raw-#{key=KEY}</param>

        <param name="consumer">RawConsumer</param>
        <param name="field.key">KEY</param>
        <param name="field.value">VALUE</param>
        <param name="field.ts">TIMESTAMP</param>
        <param name="field.partition">PARTITION</param>
    </data_provider> -->


</adapters_conf>
