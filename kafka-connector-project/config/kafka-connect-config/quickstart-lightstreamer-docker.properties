############################################################################################################
#                                                                                                          #
# Kafka Sink Connector configuration properties                                                            #
#                                                                                                          #
# See full documentation at:                                                                               #
# https://docs.confluent.io/platform/current/installation/configuration/connect/sink-connect-configs.html# #
#                                                                                                          #
############################################################################################################

name=lightstreamer-sink
connector.class=com.lightstreamer.kafka.connect.LightstreamerSinkConnector
topics=stocks

######################################################################################################
#                                                                                                    #
# Kafka Connect Lightstreamer Sink Connector sample configuration properties                         #
#                                                                                                    #
# For full configuration reference, see documentation at:                                            #
# https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#configuration-1 #
#                                                                                                    #
######################################################################################################

# The Lightstreamer server's Proxy Adapter address to connect to in the format `host:port`.
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#lightstreamerserverproxy_adapteraddress
lightstreamer.server.proxy_adapter.address=lightstreamer:6661

# The (optional) amount of time in milliseconds the connector will wait for the socket connection
# to be established to the Lightstreamer server's Proxy Adapter before terminating the task.
# Specify `0` for infinite timeout.
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#lightstreamerserverproxy_adaptersocketconnectionsetuptimeoutms
lightstreamer.server.proxy_adapter.socket.connection.setup.timeout.ms=15000

# The (optional) max number of retries to establish a connection to the Lightstreamer server's Proxy Adapter.
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#ightstreamerserverproxy_adaptersocketconnectionsetupmaxretries
lightstreamer.server.proxy_adapter.socket.connection.setup.max.retries=5

# The (optional) amount of time in milliseconds to wait before retrying to establish a new connection to the
# Lightstreamer server's Proxy Adapter in case of failure.
# Only applicable if `lightstreamer.server.proxy_adapter.socket.connection.setup.max.retries` > 0.
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#lightstreamerserverproxy_adaptersocketconnectionsetupretrydelayms
# lightstreamer.server.proxy_adapter.socket.connection.setup.retry.delay.ms=15000

# The username to use for authenticating to the Lightstreamer server's Proxy Adapter. This setting requires authentication to be enabled in the configuration of the Proxy Adapter.
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#lightstreamerserverproxy_adapterusername
# lightstreamer.server.proxy_adapter.username=lightstreamer_user

# The password to use for authenticating to the Lightstreamer server's Proxy Adapter. This setting requires authentication to be enabled in the configuration of the Proxy Adapter.
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#lightstreamerserverproxy_adapterpassword
# lightstreamer.server.proxy_adapter.password=lightstreamer_password

# If enabled, reverses the standard connection flow by having the Lightstreamer server's Proxy Adapter initiate the connection as a client to the port specified in `request_reply.port`.
# This inverse connection pattern requires setting the `remote_host` parameter in the Proxy Adapter configuration.
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#connectioninversionenable
# connection.inversion.enable=false

# The port to use for request-reply communication with the Lightstreamer server's Proxy Adapter when connection inversion is enabled. 
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#request_replyport
# request_reply.port=661

# The maximum number of allowed remote Proxy Adapter connections when connection inversion is enabled. 
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#maxproxyadapterconnections
# max.proxy.adapter.connections=1

# The (optional) error handling strategy to be used if an error occurs while extracting data from incoming deserialized records. Can be one of the following:
#
# - TERMINATE_TASK: terminate the task immediately
#
# - IGNORE_AND_CONTINUE: ignore the error and continue to process the next record
#
# - FORWARD_TO_DLQ: forward the record to the dead letter queue
#
# In particular, the FORWARD_TO_DLQ value requires a dead letter queue to be configured; otherwise it will fallback to TERMINATE_TASK.
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#recordextractionerrorstrategy-1
# record.extraction.error.strategy=IGNORE_AND_CONTINUE

# Semicolon-separated list of item templates, which specify the rules to enable the filtering routing. The list should describe a set of templates in the following form:
#
# [templateName1]:[template1];[templateName2]:[template2];...;[templateNameN]:[templateN]
#
# where the [templateX] configures the item template [templateName] defining the general format of the items the Lightstreamer clients must subscribe to to receive updates.
#
# A template is specified in the form:
#
# item-prefix-#{paramName1=extractionExpression1,paramName2=extractionExpression2,...}
#
# To map a topic to an item template, reference it using the item-template prefix in the topic.mappings configuration:
#
# topic.mappings=some-topic:item-template.templateName1,item-template.templateName2,...
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#topicmappings
item.templates=stock-template:stock-#{index=KEY}

# Semicolon-separated list of mappings between source topics and Lightstreamer items. The list should describe a set of mappings in the form:
#
# [topicName1]:[mappingList1];[topicName2]:[mappingList2];...[topicNameN]:[mappingListN]
#
# where every specified topic ([topicNameX]) is mapped to the item names or item templates specified as comma-separated list ([mappingListX]).
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#itemtemplates
topic.mappings=stocks:item-template.stock-template

# The (optional) flag to enable the topicName parts of the `topic.mappings` parameter to be treated as a regular expression rather than of a literal topic name.
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#topicmappingsregexenable
# topic.mappings.regex.enable=false

# The list of mapping between Kafka records and Lightstreamer fields. The list should describe a set of subscribable fields in the following form:
# 
# [fieldName1]:[extractionExpression1],[fieldName2]:[extractionExpressionN],...,[fieldNameN]:[extractionExpressionN]
# 
# where the Lightstreamer field [fieldNameX] will hold the data extracted from a deserialized Kafka record using the Data Extraction Language [extractionExpressionX].
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#recordmappings
record.mappings=timestamp:#{VALUE.timestamp},\
               time:#{VALUE.time},\
               stock_name:#{VALUE.name},\
               last_price:#{VALUE.last_price},\
               ask:#{VALUE.ask},\
               ask_quantity:#{VALUE.ask_quantity},\
               bid:#{VALUE.bid},\
               bid_quantity:#{VALUE.bid_quantity},\
               pct_change:#{VALUE.pct_change},\
               min:#{VALUE.min},\
               max:#{VALUE.max},\
               ref_price:#{VALUE.ref_price},\
               open_price:#{VALUE.open_price},\
               item_status:#{VALUE.item_status},\
               ts:#{TIMESTAMP},\
               topic:#{TOPIC},\
               offset:#{OFFSET},\
               partition:#{PARTITION}

# Enabling this (optional) parameter allows mapping of non-scalar values to Lightstreamer fields.
# This enables complex data structures from Kafka records to be directly mapped to fields without the need to flatten them into scalar values.
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#recordmappingsskipfailedenable
# record.mappings.skip.failed.enable=false

# By enabling the parameter, it is possible to map non-scalar values to Lightstreamer fields so that complex data structures from Kafka records
# can be mapped directly to fields without requiring them to be flattened into scalar value.
#
# See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/?tab=readme-ov-file#recordmappingsmapnonscalarvaluesenable
# record.mappings.map.non.scalar.values.enable=false