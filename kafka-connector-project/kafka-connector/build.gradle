plugins {
    id 'lightstreamer-kafka-connector'
    id 'com.github.davidmc24.gradle.plugin.avro' version "1.9.1"
    id 'maven-publish'
    id 'project-report'
    id 'distribution'
    id 'com.google.protobuf' version '0.9.5'
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/lightstreamer/lightstreamer-kafka-connector")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from components.java
        }
    }
}

dependencies {
    api group: 'com.lightstreamer', name: 'ls-adapter-inprocess', version: '8.0.0'

    implementation group: 'org.slf4j', name: 'slf4j-reload4j', 'version': '2.0.10'
    implementation group: 'org.apache.kafka', name:'kafka-clients', version:'7.7.0-ccs'
    implementation group: 'io.confluent', name: 'kafka-avro-serializer', version:'7.7.0'
    implementation group: 'io.confluent', name: 'kafka-json-serializer', version:'7.7.0'
    implementation group: 'io.confluent', name: 'kafka-json-schema-serializer', version:'7.7.0'
    implementation group: 'io.confluent', name: 'kafka-protobuf-serializer', version:'7.7.0'

    implementation group: 'com.lightstreamer', name: 'ls-adapter-remote', version: '1.7.0'
    implementation group: 'org.apache.kafka', name:'connect-api', version:'7.7.0-ccs'
    implementation group: 'org.apache.kafka', name:'connect-json', version:'7.7.0-ccs'

    implementation group: 'software.amazon.msk', name:'aws-msk-iam-auth', version:'2.3.2'

    testImplementation 'com.google.protobuf:protobuf-java:3.24.0'
}

ext {
    connectConfigDir = "${parent.projectDir}/config/kafka-connect-config"
    licensesDir = "${parent.projectDir}/licenses"
}

import com.github.jk1.license.filter.*
import com.github.jk1.license.render.*
import org.sample.*

licenseReport {
    filters = [
        new ExcludeDependenciesWithoutArtifactsFilter (),
        new LicenseBundleNormalizer(bundlePath: "$parent.projectDir/config/license-config/license-normalizer-bundle.json")
    ]

    renderers  = [
        new TextReportRenderer(),
        new SimpleHtmlReportRenderer(),
        new KafkaConnectorLicenseRenderer("$licensesDir/THIRD-PARTY-LIBRARIES.txt", "$licensesDir/THIRD-PARTY-LIBRARIES.csv"),
    ]

    excludes = [
        'com.lightstreamer:ls-adapter-inprocess',
        'com.lightstreamer:ls-adapter-remote',
        'com.lightstreamer:ls-log-adapter-java',
        'com.google.code.findbugs:jsr305',
        'org.apache.kafka:connect-api',
        'org.apache.kafka:connect-json',
        'javax.ws.rs:javax.ws.rs-api'
    ]

    importers = []
}



jar {
    exclude "com/lightstreamer/kafka/connect/**"
    exclude "META-INF/services"
    archiveBaseName = "lightstreamer-kafka-connector"
}

tasks.register("kafkaConnectJar", Jar) {
    from sourceSets.main.output
    exclude "com/lightstreamer/kafka/adapters/**"
    archiveBaseName = connect_componentName
}

javadoc {
    include '**/pub/KafkaConnectorMetadataAdapter.java'
    exclude '**/pub/*ConnectionInfo*'
    destinationDir = file("${project.rootDir}/../docs/javadoc")
    options.addStringOption("doctitle", "<h1>$brandedProjectName <br>API Specification</h1>")
    options.overview = "src/doc/overview.html"
    options.addStringOption("link", "https://sdk.lightstreamer.com/ls-adapter-inprocess/8.0.0/api")
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.24.0'
    }
    generateProtoTasks {
        all().configureEach { task ->
            task.generateDescriptorSet = true
        }
    }
}

processResources {
    filesMatching("version.properties") {
        expand([version:version])
    }
}

processTestResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distributions {
    adapter {
        distributionBaseName = rootProject.name
        contents {
            from(jar) {
                into "lib"
            }

            from (configurations.runtimeClasspath) {
                into "lib"
                exclude "ls-adapter-inprocess*"
                exclude "ls-adapter-remote*"
                exclude "ls-log-adapter*"
                exclude "jsr305*"
                exclude "javax.ws.rs-api-*"
                exclude "connect-*"
            }

            from (licensesDir) {
                include "THIRD-PARTY-LIBRARIES.txt"
            }
        }
    }

    connect {
        distributionBaseName = "${connect_owner}-${connect_componentName}"
        contents {
            from(kafkaConnectJar) {
                into "lib"
            }

            from (configurations.runtimeClasspath) {
                into "lib"
                include "ls-adapter-remote*"
                include "ls-log-adapter*"
            }

            from ("${rootDir}/..") {
                into "doc"
                include "LICENSE"
            }

            from (licensesDir) {
                into "doc"
                include "THIRD-PARTY-LIBRARIES-connect.txt"
                rename {"THIRD-PARTY-LIBRARIES.txt"}
            }

            from (connectConfigDir) {
                into "etc"
            }

            from ("src/connect/manifest.json.tpl") {
                expand(
                        name: connect_componentName,
                        title: brandedProjectName,
                        version: version,
                        owner: connect_owner,
                        release_date: release_date
                        ) {
                            escapeBackslash = true
                        }
                rename {"manifest.json"}
            }
        }
    }
}

build.dependsOn javadoc
