---
name: airport-demo-kafka
services:
  kafka-connector:
    container_name: kafka-connector
    image: lightstreamer-kafka-connector-${version}
    depends_on:
      - broker
      - producer
    ports:
      - 8080:8080
    configs:
      - source: adapters.xml
        target: /lightstreamer/adapters/lightstreamer-kafka-connector-${version}/adapters.xml
      - source: const.js
        target: /lightstreamer/pages/AirportDemo/js/const.js
      - source: log4j.properties
        target: /lightstreamer/adapters/lightstreamer-kafka-connector-${version}/log4j.properties
    volumes:
      - ./client/web/src:/lightstreamer/pages/AirportDemo

  producer:
    container_name: producer
    depends_on:
      - broker
    build:
      context: producer
    command: ["broker:29092", "Flights", "1000"]      

  broker:
    image: apache/kafka
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
      - "8082:8082"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false

  init-broker:
    container_name: init-broker
    image: apache/kafka
    command: /opt/kafka/bin/kafka-topics.sh --create --topic Flights --bootstrap-server broker:29092 --config cleanup.policy=compact
    depends_on:
        broker:
            condition: service_started      

configs:
  adapters.xml:
    content: |
      <?xml version="1.0"?>
      <adapters_conf id="KafkaConnector">
          <metadata_provider>
              <adapter_class>com.lightstreamer.kafka.adapters.pub.KafkaConnectorMetadataAdapter</adapter_class>
              <param name="logging.configuration.path">log4j.properties</param>
          </metadata_provider>

          <data_provider name="AirpotDemo">
              <adapter_class>com.lightstreamer.kafka.adapters.KafkaConnectorDataAdapter</adapter_class>

              <param name="bootstrap.servers">broker:29092</param>

              <param name="record.consume.from">EARLIEST</param>
              <param name="record.key.evaluator.type">STRING</param>
              <param name="record.value.evaluator.type">JSON</param>

              <param name="item-template.flights">flights-#{key=KEY}</param>
              <param name="map.Flights.to">item-template.flights</param>

              <param name="field.key">#{KEY}</param>
              <param name="field.destination">#{VALUE.destination}</param>
              <param name="field.departure">#{VALUE.departure}</param>
              <param name="field.flightNo">#{VALUE.flightNo}</param>
              <param name="field.terminal">#{VALUE.terminal}</param>
              <param name="field.status">#{VALUE.status}</param>
              <param name="field.airline">#{VALUE.airline}</param>
              <param name="field.currentTime">#{VALUE.currentTime}</param>
              <param name="field.ts">#{TIMESTAMP}</param>
              <param name="field.partition">#{PARTITION}</param>
              <param name="field.offset">#{OFFSET}</param>
          </data_provider>
      </adapters_conf>
  log4j.properties:
    content: |
      log4j.rootLogger=DEBUG, stdout
      log4j.logger.org.apache.kafka=WARN, stdout
      log4j.logger.AirpotDemo=TRACE, AirportDemo

      log4j.appender.stdout=org.apache.log4j.ConsoleAppender
      log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
      log4j.appender.stdout.layout.ConversionPattern=[%d] [%-10c{1}] %-5p %m%n
      log4j.appender.stdout.Target=System.out

      log4j.appender.stderr=org.apache.log4j.ConsoleAppender
      log4j.appender.stderr.layout=org.apache.log4j.PatternLayout
      log4j.appender.stderr.layout.ConversionPattern=[%d] [%t-%c] %p %m%n
      log4j.appender.stderr.Target=System.err

      # Airport logger appender
      log4j.appender.AirportDemo=org.apache.log4j.ConsoleAppender
      log4j.appender.AirportDemo.layout=org.apache.log4j.PatternLayout
      log4j.appender.AirportDemo.layout.ConversionPattern=[%d] [%-10c{1}] %-5p %m%n
  const.js:
    content: |
      const LS_HOST = "localhost";
      const LS_HTTP_PORT = "8080";
      const LS_HTTPS_PORT = "443";
      const LS_ADAPTER_SET = "KafkaConnector";
