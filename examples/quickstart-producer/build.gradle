plugins {
	id 'java'
	id 'maven-publish'
	id 'com.google.protobuf' version '0.9.5'
	id 'com.diffplug.spotless' version '7.0.3'
}

repositories {
	mavenCentral()
	maven {
		url "https://packages.confluent.io/maven"
	}
}

dependencies {
	implementation group: 'info.picocli', name:'picocli', version:'4.7.5'

	implementation group: 'org.slf4j', name: 'slf4j-reload4j', 'version': '2.0.10'
	implementation group: 'org.apache.kafka', name:'kafka-clients', version:'7.7.0-ccs'
	implementation group: 'io.confluent', name: 'kafka-json-serializer', version:'7.7.0'
	implementation group: 'io.confluent', name: 'kafka-json-schema-serializer', version:'7.7.0'
	implementation group: 'io.confluent', name: 'kafka-protobuf-serializer', version:'7.7.0'
	implementation 'com.google.protobuf:protobuf-java:3.24.0'

	testImplementation "com.google.truth:truth:1.4.4"
	testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

spotless {
	groovyGradle {
		target '**/*.gradle'
		trimTrailingWhitespace()
		leadingTabsToSpaces()
		endWithNewline()
		greclipse()
	}
	java {
		target 'src/main/**/*.java','src/test/**/*.java','src/jmh/**/*.java'
		googleJavaFormat()
				.aosp()
				.reorderImports(true)
				.reflowLongStrings(false)
				.groupArtifact('com.google.googlejavaformat:google-java-format')
		removeUnusedImports()
		formatAnnotations()
		licenseHeader '''
/*
 * Copyright (C) $YEAR Lightstreamer Srl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

'''
	}
}

ext {
	appendix = 'all'
}

protobuf {
	protoc {
		artifact = 'com.google.protobuf:protoc:3.24.0'
	}
	generateProtoTasks {
		all().configureEach { task ->
			task.generateDescriptorSet = true
		}
	}
}

group = 'com.lightstreamer.kafka'
version = '1.0.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

sourceSets {
	test {
		proto {
			srcDir 'src/main/proto'
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
	options.encoding = 'UTF-8'
}

jar {
	manifest {
		attributes 'Main-Class': "com.lightstreamer.kafka.examples.quick_start.producer.Producer"
	}
	archiveAppendix = appendix

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}

tasks.named('test') {
	useJUnitPlatform()
}

publishing {
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/lightstreamer/Lightstreamer-kafka-connector")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
				password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
			}
		}
	}
	publications {
		gpr(MavenPublication) {
			artifactId project.name + '-' + appendix
			version = version
			artifact jar
		}
	}
}
